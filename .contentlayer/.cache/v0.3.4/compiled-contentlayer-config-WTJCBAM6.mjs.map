{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc: { _raw: { flattenedPath: any } }) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: 'string',\n    resolve: (doc: { _raw: { flattenedPath: string } }) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: 'posts',\n  filePathPattern: `**/*.mdx`, // Type of file to parse (every mdx in all subfolders)\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    author: {\n      type: 'string',\n      description: 'The author of the post',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      description: 'The description of the post',\n      required: true,\n    },\n    coverImage: {\n      type: 'image',\n      description: 'The cover image of the post',\n      required: false, //We can use auto-generated images based on the title\n    },\n    published: {\n      type: 'boolean',\n      description: 'Whether the post is published',\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/blogs/${post._raw.flattenedPath}`,\n    },\n  },\n}));\nexport default makeSource({\n  contentDirPath: 'data', // Source directory where the content is located\n  documentTypes: [Post],\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAcxC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,aAAa;AAAA,IACtD;AAAA,EACF;AACF,EAAE;AACF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA;AAAA,EAChB,eAAe,CAAC,IAAI;AACtB,CAAC;",
  "names": []
}
